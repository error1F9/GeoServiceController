// Code generated by MockGen. DO NOT EDIT.
// Source: address.go
//
// Generated by this command:
//
//	mockgen -source=address.go -destination=mocks/mock_controller.go -package=mocks
//

// Package mocks is a generated GoMock package.
package service

import (
	entity "GeoService/internal/modules/address/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGeoProvider is a mock of GeoProvider interface.
type MockGeoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockGeoProviderMockRecorder
	isgomock struct{}
}

// MockGeoProviderMockRecorder is the mock recorder for MockGeoProvider.
type MockGeoProviderMockRecorder struct {
	mock *MockGeoProvider
}

// NewMockGeoProvider creates a new mock instance.
func NewMockGeoProvider(ctrl *gomock.Controller) *MockGeoProvider {
	mock := &MockGeoProvider{ctrl: ctrl}
	mock.recorder = &MockGeoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoProvider) EXPECT() *MockGeoProviderMockRecorder {
	return m.recorder
}

// AddressSearch mocks base method.
func (m *MockGeoProvider) AddressSearch(input string) ([]*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressSearch", input)
	ret0, _ := ret[0].([]*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressSearch indicates an expected call of AddressSearch.
func (mr *MockGeoProviderMockRecorder) AddressSearch(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressSearch", reflect.TypeOf((*MockGeoProvider)(nil).AddressSearch), input)
}

// GeoCode mocks base method.
func (m *MockGeoProvider) GeoCode(lat, lng string) ([]*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoCode", lat, lng)
	ret0, _ := ret[0].([]*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoCode indicates an expected call of GeoCode.
func (mr *MockGeoProviderMockRecorder) GeoCode(lat, lng any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoCode", reflect.TypeOf((*MockGeoProvider)(nil).GeoCode), lat, lng)
}
