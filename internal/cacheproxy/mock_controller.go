// Code generated by MockGen. DO NOT EDIT.
// Source: cacheproxy.go
//
// Generated by this command:
//
//	mockgen -source=cacheproxy.go -destination=mocks/mock_controller.go -package=mocks
//

// Package mocks is a generated GoMock package.
package cacheproxy

import (
	entity "GeoService/internal/modules/address/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCacher is a mock of Cacher interface.
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
	isgomock struct{}
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance.
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// GeoCodeWithCache mocks base method.
func (m *MockCacher) GeoCodeWithCache(ctx context.Context, lat, lng string) ([]*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoCodeWithCache", ctx, lat, lng)
	ret0, _ := ret[0].([]*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoCodeWithCache indicates an expected call of GeoCodeWithCache.
func (mr *MockCacherMockRecorder) GeoCodeWithCache(ctx, lat, lng any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoCodeWithCache", reflect.TypeOf((*MockCacher)(nil).GeoCodeWithCache), ctx, lat, lng)
}

// SearchAddressWithCache mocks base method.
func (m *MockCacher) SearchAddressWithCache(ctx context.Context, query string) ([]*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAddressWithCache", ctx, query)
	ret0, _ := ret[0].([]*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAddressWithCache indicates an expected call of SearchAddressWithCache.
func (mr *MockCacherMockRecorder) SearchAddressWithCache(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAddressWithCache", reflect.TypeOf((*MockCacher)(nil).SearchAddressWithCache), ctx, query)
}
